<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.interfaces.AccountDao">

    <resultMap type="com.example.demo.pojo.Account" id="AccountMap">
        <result property="pkid" column="pkid" jdbcType="VARCHAR"/>
        <result property="accountName" column="account_name" jdbcType="VARCHAR"/>
        <result property="password" column="password" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="VARCHAR"/>
        <result property="userId" column="userId" jdbcType="VARCHAR"/>
    </resultMap>


    <!-- 根据账号与密码查询 -->
    <select id="selectByAccountNameAndPassword" resultMap="AccountMap">
         select
          pkid, account_name, password, create_time, userId
        from account
        where account_name = #{accountName} and password = #{password}
    </select>


    <!--查询单个-->
    <select id="queryById" resultMap="AccountMap">
        select
          pkid, account_name, password, create_time, userId
        from vue_private.account
        where pkid = #{pkid}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="AccountMap">
        select
          pkid, account_name, password, create_time, userId
        from vue_private.account
        limit #{offset}, #{limit}
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="AccountMap">
        select
        pkid, account_name, password, create_time, userId
        from vue_private.account
        <where>
            <if test="pkid != null and pkid != ''">
                and pkid = #{pkid}
            </if>
            <if test="accountName != null and accountName != ''">
                and account_name = #{accountName}
            </if>
            <if test="password != null and password != ''">
                and password = #{password}
            </if>
            <if test="createTime != null and createTime != ''">
                and create_time = #{createTime}
            </if>
            <if test="userid != null and userid != ''">
                and userId = #{userid}
            </if>
        </where>
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="pkid" useGeneratedKeys="true">
        insert into vue_private.account(account_name, password, create_time, userId)
        values (#{accountName}, #{password}, #{createTime}, #{userid})
    </insert>

    <insert id="insertBatch" keyProperty="pkid" useGeneratedKeys="true">
        insert into vue_private.account(account_name, password, create_time, userId)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.accountName}, #{entity.password}, #{entity.createTime}, #{entity.userid})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="pkid" useGeneratedKeys="true">
        insert into vue_private.account(account_name, password, create_time, userId)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.accountName}, #{entity.password}, #{entity.createTime}, #{entity.userid})
        </foreach>
        on duplicate key update
        account_name = values(account_name) , password = values(password) , create_time = values(create_time) , userId =
        values(userId)
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update account
        <set>
            <if test="accountName != null and accountName != ''">
                account_name = #{accountName},
            </if>
            <if test="password != null and password != ''">
                password = #{password},
            </if>
            <if test="createTime != null and createTime != ''">
                create_time = #{createTime},
            </if>
            <if test="userId != null and userId != ''">
                userId = #{userId},
            </if>
            <if test="status != null and status != ''">
                status = #{status},
            </if>
        </set>
        where pkid = #{pkid}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from account where pkid = #{pkid}
    </delete>

</mapper>

